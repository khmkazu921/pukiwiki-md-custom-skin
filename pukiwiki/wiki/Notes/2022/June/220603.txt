#notemd
# Status Meeting

# Webinar SPICE+Verilog 等価性検証

  - EC  
    equivalence checking

<!-- end list -->

  - verilog simulation
      - behavior level description
  - SPICE simulation
      - Transister level implementation
  - ESP :: Symbolic simulation
      - generate equasions on output
  - Function Timing精度
      - 線形グラフを利用
  - EDM :: ESP Device Model file
      - RC information
  - Power Integrity Function
  - 冗長回路
  - ESP base & elete
  - glitch

# Self Study

## timing_earlylaunchatborrowinglatches

When a latch is in its transparent phase, data arriving at the D-pin
passes through the element as though it were combinational. To model
this scenario, whenever PrimeTime determines that time borrowing occurs
at such a D-pin, paths that originate at the D-pin are created.

Sometimes there is a difference between the launching and capturing
latch latencies, due to either reconvergent paths in the clock network
or different minimum and maximum delays of cells in the clock network.
For setup paths, PrimeTime uses the late value to launch and the early
value to capture. This achieves the tightest constraint and avoids
optimism. However, for paths starting from latch D-pins, this is
pessimistic since data simply passes through and therefore does not even
"see" the clock edge at the latch.

When the `timing_early_launch_at_borrowing_latches` variable is true
(the default), the tools eliminates this pessimism by using the early
latch latency to launch such paths. Note that only paths that originate
from a latch D-pin are affected. When the variable is set to false, the
tools uses late clock latency to launch all setup paths in the design.

When the `timing_early_launch_at_borrowing_latches` and
`timing_remove_clock_reconvergence_pessimism` variables are both set to
true, the tool applies CRPR to paths that do not start from transparent
latch D-pins, while the paths that start from transparent latch D-pins
have early launch using the minimum path. It is not possible to apply
both pessimism removal techniques on the same timing path.

The following recommended settings depend on the characteristics of your
design:

On designs with long clock paths, consider setting
timing_earlylaunchatborrowinglatches to false. This allows
CRPR to be applied on paths that start from transparent latch D-pins.
When clock paths are long, CRPR can be a more powerful pessimism
reduction technique.

On designs with shorter common clock paths, or where critical paths
traverse several latches, consider setting
timing_earlylaunchatborrowinglatches to true. This results in
more pessimism removal, even though paths that start from transparent
D-pins do not get any CRPR credit.

## PT Unit 8

  - A window alignment mode `all_paths`
    
    ``` tcl
    set_app_var si_xtalk_delay_analysis_mode all_paths|all_path_edge
    ```

  - `all_path_edge`
    
      - Should I use all_pathedges all the time?
          - Yes - the small increase in runtime (up to 10%) is worth
            it\!

  - **No Timing Window Overlap, No Delta Delay**

  - report is sorted by <span class="underline">bump height</span>
    
    ``` tcl
    report_delay_calculation -from U1407/ZN -to U1416/Al -crosstalk
    ```

## PT Unit 9 SI Noise Analysis

### PTSI Noise Run Script

``` tcl
lappend link_path tech_lib.db RAMmodel.db
source application_variables.tcl
set si_enable_analysis true

read_verilog ORCA.v; current_design ORCA
link_design
read_parasitics -keep_capacitive_coupling -format GPD gpd_dir
source func_maxPVI_constraints.tcl
check_timing
report_timing -crosstalk
report_noise -all_violators
save_session func_maxPVT_savesession
print_message_info; quit
```

### Steady-state I-V characteristics

  - noise bump
    
      - bump size is affected by <span class="underline">\_</span>
        
        ``` tcl
        report_noise -above -low
        report_noise -below -high
        ```

### Noise Immunity Curve & Noise Margin Constraint

  - describes the amount of noise that can be torerated on the input
    causing a logic failure at the output
  - Noise margin is a simpler faster but more conservative method

### Noise slack

  - the voltage margin = height of the curve (NIC) above Vfail

  - NIC :: Noise Immunity Curve
    
    ``` tcl
    report_noise -slack_type height
    report_noise -slack area
    report_noise -slack area_percent
    ```

  - If the noise calculated for a victim is zero, slack is infinity ?

### Beyond Rail Analysis

  - Bumps below low and abovehigh are also important
    
    ``` tcl
    set_noise_parameters -include_beyond_rails
    report_noise
    ```

### Noise Propagation

  - specified in the library
  - scaled down toits constraint height multiplied by 75%

### Manual setting

``` tcl
set_steady_state_resistance
# Sets a noise bump for a pin or port.
set_input_noise
set_noise_immunity_curve
set_noise_margin
```

### Add margin on the calculated noise bump size

``` tcl
set_noise_derate
set_si_noise_analysis -exclude my_net \
    -ignore_arrival my_io_nets
```

### Double Switching Detection

``` tcl
set si_xtalk_double_switching_mode clock_network
update_timing
report_si_double_switching
```

### CCS Noise Model

  - Noise analysis using CCS model computes exact glitch waveform at the
    load pin.
  - noise immunity table is not Stored in CCS Noise library.
  - To save run time, PT would use detailed immunity calculation only
    when really required.

### Reports

  - `report_noise_calculation`
    
      - The contribution from individual aggressors is only an estimate.

  - `report_at_source` shows violations
    
    ``` tcl
    set_noise_parameters -analysis_mode report_at_source
    report_noise -nworst_pins 8
    ```

  - `report_at_endpoints` shows failures
    
    ``` tcl
    set_noise_parameters -analysismode report_atsource
    report_noise -nworst pins 8
    ```

  - reporting violation sources
    
    ``` tcl
    report_noise_violation_sources
    ```

## Lab 8

``` tcl
# Q2. How many violationsare in this design?
report_analysis_coverage
# Q3. How large is the worst slack for setupin this design?
report_timing -path summary
# Q10. How large is the largest delta delay in this design?
report_si_bottleneck -cost_type delta_delay
# Q13. allow clock nets
report_si_bottleneck -cost_type delta_delay -include_clock_nets
# identify victim nets with the largest ratio between delta delay
# andstage delay.
report_si_bottleneck -cost_type delta_delay_ratio
# identify the strongest aggressors
report_si_bottleneck -cost_type delay_bump_per_aggressor
# report the worst case clock skew and the associated crosstalk
# contributions
report_si_bottleneck -cost_type total_victim_delay_bump
```

  - **The stage delay is the cell + net delay**

<!-- end list -->

``` text
1

pt_shell> report_si_bottleneck -cost_type delay_bump_per_aggressor
****************************************
Report : si_bottleneck
        -cost_type delay_bump_per_aggressor
        -slack_lesser_than 0
        -max_nets 20
        -significant_digits 4
        -minimum_active_aggressors 1
        -min
        -max
Design : DOLPHIN
Version: O-2018.06
Date   : Fri Jun  3 16:22:59 2022
****************************************

 Bottleneck Cost:  delay_bump_per_aggressor
 net                                                         cost
 ---------------------------------------------------------------------
 s4_mul_188_mult_mult_n1901                                    0.2366
 s4_mul_189_mult_mult_n1928ASThfnNet60                         0.1988
 s4_mul_188_mult_mult_n1903                                    0.1791
 s4_mul_188_mult_mult_n1900                                    0.1664
 s4_mul_189_mult_mult_n1907ASThfnNet43                         0.1567
 s4_mul_188_mult_mult_n1928ASThfnNet74                         0.1523
 s4_mul_189_mult_mult_n1909                                    0.1437
 s4_mul_191_mult_mult_n756ASTzrNet338                          0.1370
 s4_mul_188_mult_mult_n1128                                    0.1337
 s4_mul_189_mult_mult_n1912ASThfnNet50                         0.1281
 s4_mul_188_mult_mult_n1904ASTipoNet186                        0.1218
 n7434ASTipoNet318                                             0.1215
 s4_mul_188_mult_mult_n1924                                    0.1131
 n6478                                                         0.1092
 s4_mul_188_mult_mult_n1921                                    0.1053
 s4_mul_188_mult_mult_n1904                                    0.1032
 s4_mul_188_mult_mult_n1899                                    0.1025
 s4_mul_189_mult_mult_n1921ASThfnNet67                         0.1018
 n7517                                                         0.1005
 s4_mul_191_mult_mult_n1010ASThfnNet112                        0.0988

1
```
